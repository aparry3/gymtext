import { describe, it, expect, beforeEach, vi } from 'vitest';
import { NextRequest } from 'next/server';
import { GET } from '@/app/api/cron/daily-messages/route';

// NOTE: These tests focus on the API route authentication logic.
// The actual service functionality is tested in the service layer tests.
describe('Cron Daily Messages API Endpoint - Authentication', () => {
  const originalEnv = process.env.NODE_ENV;
  const originalSecret = process.env.CRON_SECRET;
  const originalDbUrl = process.env.DATABASE_URL;
  const originalTwilioSid = process.env.TWILIO_ACCOUNT_SID;
  const originalTwilioAuth = process.env.TWILIO_AUTH_TOKEN;
  const originalTwilioNumber = process.env.TWILIO_NUMBER;

  beforeEach(() => {
    vi.clearAllMocks();
    // Set a valid database URL to prevent initialization errors
    process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:postgres@localhost:5433/gymtext_test';
    // Set mock Twilio credentials to prevent initialization errors
    process.env.TWILIO_ACCOUNT_SID = 'ACtest1234567890abcdef1234567890ab';
    process.env.TWILIO_AUTH_TOKEN = 'test_auth_token';
    process.env.TWILIO_NUMBER = '+15555551234';
  });

  afterEach(() => {
    process.env.NODE_ENV = originalEnv;
    process.env.CRON_SECRET = originalSecret;
    process.env.DATABASE_URL = originalDbUrl;
    process.env.TWILIO_ACCOUNT_SID = originalTwilioSid;
    process.env.TWILIO_AUTH_TOKEN = originalTwilioAuth;
    process.env.TWILIO_NUMBER = originalTwilioNumber;
  });

  describe('Production Environment', () => {
    beforeEach(() => {
      process.env.NODE_ENV = 'production';
    });

    it('should accept requests with valid CRON_SECRET', async () => {
      process.env.CRON_SECRET = 'test-secret-123';

      const request = new NextRequest('http://localhost:3000/api/cron/daily-messages', {
        headers: {
          'authorization': 'Bearer test-secret-123'
        }
      });

      // Mock the service to prevent actual database operations
      vi.mock('@/server/services/dailyMessageService', () => ({
        DailyMessageService: vi.fn().mockImplementation(() => ({
          processHourlyBatch: vi.fn().mockResolvedValue({
            processed: 0,
            failed: 0,
            errors: [],
            duration: 100
          })
        }))
      }));

      const response = await GET(request);
      expect(response.status).toBe(200);
      
      const data = await response.json();
      expect(data.success).toBe(true);
      expect(data.timestamp).toBeDefined();
    });

    it('should reject requests with invalid secret', async () => {
      process.env.CRON_SECRET = 'test-secret-123';

      const request = new NextRequest('http://localhost:3000/api/cron/daily-messages', {
        headers: {
          'authorization': 'Bearer wrong-secret'
        }
      });

      const response = await GET(request);
      expect(response.status).toBe(401);
      
      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should reject requests without authorization header', async () => {
      process.env.CRON_SECRET = 'test-secret-123';

      const request = new NextRequest('http://localhost:3000/api/cron/daily-messages');

      const response = await GET(request);
      expect(response.status).toBe(401);
      
      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should return 500 if CRON_SECRET is not configured', async () => {
      delete process.env.CRON_SECRET;

      const request = new NextRequest('http://localhost:3000/api/cron/daily-messages', {
        headers: {
          'authorization': 'Bearer some-secret'
        }
      });

      const response = await GET(request);
      expect(response.status).toBe(500);
      
      const data = await response.json();
      expect(data.error).toBe('Server configuration error');
    });
  });

  describe('Development Environment', () => {
    beforeEach(() => {
      process.env.NODE_ENV = 'development';
    });

    it('should allow requests without authentication', async () => {
      const request = new NextRequest('http://localhost:3000/api/cron/daily-messages');

      // Mock the service to prevent actual database operations
      vi.mock('@/server/services/dailyMessageService', () => ({
        DailyMessageService: vi.fn().mockImplementation(() => ({
          processHourlyBatch: vi.fn().mockResolvedValue({
            processed: 5,
            failed: 1,
            errors: [{ userId: 'user-1', error: 'No workout' }],
            duration: 250
          })
        }))
      }));

      const response = await GET(request);
      expect(response.status).toBe(200);
      
      const data = await response.json();
      expect(data.success).toBe(true);
      expect(data.errors).toBeDefined(); // Errors included in dev mode
      expect(data.errors).toHaveLength(1);
    });
  });
});